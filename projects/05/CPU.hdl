// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
        /* A register */
        // select input of A, between instruction bits and ALU output
        Mux16(a=instruction, b=outAlu, sel=instruction[15], out=muxAluIns);
        // A is enabled for load either if the opcode is 0 or the first dest bit is 1
        Not(in=instruction[15], out=aInstruction);
        Or(a=aInstruction, b=instruction[5], out=loadA);
        ARegister(in=muxAluIns, load=loadA, out=outA, out[0..14]=addressM);

        /* D register */
        And(a=instruction[15], b=instruction[4], out=loadD);
        DRegister(in=outAlu, load=loadD, out=outD);
        
        /* ALU */
        // select y input of ALU between A and M
        Mux16(a=outA, b=inM, sel=instruction[12], out=muxAM);
        ALU(x=outD, y=muxAM, zx=instruction[11], nx=instruction[10],
            zy=instruction[9], ny=instruction[8], f=instruction[7],
            no=instruction[6], out=outAlu, out=outM, zr=zr, ng=ng);

        /* RAM write */
        And(a=instruction[15], b=instruction[3], out=writeM);

        /* PC */
        // flag invertions
        Not(in=zr, out=notZr);
        Not(in=ng, out=notNg);
        
        // compute intermediate flag-based values for some jump instructions
        And(a=notZr, b=notNg, out=jgt);  // JGT (comp > 0)
        Or(a=zr, b=ng, out=jle);         // JLE (comp <= 0)
        
        // using mux to select corresponding flag result for each jump instruction
        Mux8Way16(a[0]=false, b[0]=jgt, c[0]=zr, d[0]=notNg, e[0]=ng, f[0]=notZr,
                  g[0]=jle, h[0]=true, sel[0]=instruction[0], sel[1]=instruction[1],
                  sel[2]=instruction[2], out[0]=loadCondition);
        And(a=instruction[15], b=loadCondition, out=loadPC);
        
        PC(in=outA, load=loadPC, inc=true, reset=reset, out[0..14]=pc);
}