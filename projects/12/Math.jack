// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array twoToThe;

    /** Initializes the library. */
    function void init() {
        var int i, val;
        
        /* Initialise twoToThe array */
        let twoToThe = Array.new(16);
        let i = 0;
        let val = 1;
        while (i < 16) {
            let twoToThe[i] = val;
            let val = val + val;
            let i = i + 1;
        }

        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            return -x;
        }
        return x;
    }

    /** Returns true if i-th bit of integer x is 1, and false otherwise */
    function boolean bit(int x, int i) {
        return (x & twoToThe[i]) > 0;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, i;
        var boolean negX, negY;

        let negX = x < 0;
        let negY = y < 0;
        let x = Math.abs(x);
        let y = Math.abs(y);

        let sum = 0;
        let i = 0;

        while (i < 16) {  // bit-width of 16
            if (Math.bit(y, i)) {
                let sum = sum + x;
            }
            let x = x + x;
            let i = i + 1;
        }

        if (negX = negY) {
            return sum;
        }
        return -sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int q, answer;
        var boolean negX, negY;

        let negX = x < 0;
        let negY = y < 0;
        let x = Math.abs(x);
        let y = Math.abs(y);

        if ((y > x) | (y < 0)) {
            return 0;
        }

        let q = Math.divide(x, y + y);

        if ((x - ((q + q) * y)) < y) {
            let answer = q + q;
        } else {
            let answer = (q + q) + 1;
        }

        if (negX = negY) {
            return answer;
        }
        return -answer;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, i, temp, temp_sq;

        let y = 0;
        let i = 7;  // bit-width / 2 - 1
        while (i > -1) {
            let temp = y + twoToThe[i];
            let temp_sq = temp * temp;
            if (~(temp_sq > x) & (temp_sq > 0)) {
                let y = temp;
            }
            let i = i - 1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        }
        return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        }
        return b;
    }
}
